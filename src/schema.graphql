type Chat {
  id: Int!
  messages: [Message]!
  participants: [User]!
  createdAt: String!
  updatedAt: String
}

type Message {
  id: Int!
  user: User!
  chat: Chat!
  text: String!
  createdAt: String!
  updatedAt: String
}

type AddPlaceResponse {
  ok: Boolean!
  error: String
}

type Mutation {
  AddPlace(name: String!, lat: Float!, lng: Float!, address: String!, isFav: Boolean!): AddPlaceResponse!
  DeletePlace(placeId: Int!): DeletePlaceResponse!
  EditPlace(placeId: Int!, name: String, isFav: Boolean): EditPlaceResponse!
  CompleteEmailVerification(key: String!): CompleteEmailVerificationResponse!
  CompletePhoneVerification(key: String!, phoneNumber: String!): CompletePhoneVerificationResponse!
  EmailSignIn(email: String!, password: String!): EmailSignInResponse!
  EmailSignUp(email: String!, password: String!, firstName: String!, lastName: String!, age: Int!, phoneNumber: String!, profilePhoto: String!): EmailSignUpResponse!
  FacebookConnect(firstName: String!, lastName: String!, email: String, fbId: String!): FacebookConnectResponse!
  RequestEmailVerification: RequestEmailVerificationResponse!
  StartPhoneVerification(phoneNumber: String!): StartPhoneVerificationResponse!
  ToggleWalkingMode: ToggleWalkingModeResponse!
  UpdateMyProfile(firstName: String, lastName: String, age: Int, email: String, password: String, profilePhoto: String): UpdateMyProfileResponse!
}

type DeletePlaceResponse {
  ok: Boolean!
  error: String
}

type EditPlaceResponse {
  ok: Boolean!
  error: String
}

type GetMyPlacesResponse {
  ok: Boolean!
  error: String
  places: [Place]
}

type Query {
  GetMyPlaces: GetMyPlacesResponse!
  ride: Ride
  GetMyProfile: GetMyProfileResponse!
  user: User
  verification: Verification
}

type Place {
  id: Int!
  name: String!
  lat: Float!
  lng: Float!
  address: String!
  isFav: Boolean!
  userId: Int!
  user: User!
  createdAt: String!
  updatedAt: String
}

type Ride {
  id: Int!
  status: String!
  pickUpAddress: String!
  PickUpLat: Float!
  PickUpLng: Float!
  dropOffAddress: String!
  dropOffLat: Float!
  dropOffLng: Float!
  price: Float!
  distance: String!
  duration: String!
  driver: User!
  passenger: User!
  created: String!
  updated: String
}

type CompleteEmailVerificationResponse {
  ok: Boolean!
  error: String
}

type CompletePhoneVerificationResponse {
  ok: Boolean!
  error: String
  token: String
}

type EmailSignInResponse {
  ok: Boolean!
  error: String
  token: String
}

type EmailSignUpResponse {
  ok: Boolean!
  error: String
  token: String
}

type FacebookConnectResponse {
  ok: Boolean!
  error: String
  token: String
}

type GetMyProfileResponse {
  ok: Boolean!
  error: String
  user: User
}

type RequestEmailVerificationResponse {
  ok: Boolean!
  error: String
}

type User {
  id: Int!
  email: String
  password: String
  firstName: String!
  lastName: String!
  age: Int
  phoneNumber: String
  fullName: String
  verifiedPhoneNumber: Boolean!
  verifiedEmail: Boolean!
  profilePhoto: String
  isWalking: Boolean!
  isProtecting: Boolean!
  isTaken: Boolean!
  lastLng: Float
  lastLat: Float
  lastorientation: Float
  fbId: String
  messages: [Message]
  chat: Chat
  ridesAsPassenger: [Ride]
  ridesAsDriver: [Ride]
  places: [Place]
  createdAt: String!
  updatedAt: String
}

type StartPhoneVerificationResponse {
  ok: Boolean!
  error: String
}

type ToggleWalkingModeResponse {
  ok: Boolean!
  error: String
}

type UpdateMyProfileResponse {
  ok: Boolean!
  error: String
}

type Verification {
  id: Int!
  target: String!
  payload: String!
  key: String!
  verified: Boolean!
  createdAt: String!
  updatedAt: String!
}
